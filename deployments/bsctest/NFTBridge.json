{
  "address": "0xEB0c3Bf30dcA147d838D7E8E4A72fc8bf333702B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        }
      ],
      "name": "logLockNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        }
      ],
      "name": "logWithdrawNFT",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        }
      ],
      "name": "lockNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromChain",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wrappedAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb49b08c8c80f7f8da82fd612d4bd7f3ec363009e17eaa20ee26055b0896df948",
  "receipt": {
    "to": null,
    "from": "0x289F8F063c4304F432bb96DD31e82bdCc5CcE142",
    "contractAddress": "0xEB0c3Bf30dcA147d838D7E8E4A72fc8bf333702B",
    "transactionIndex": 6,
    "gasUsed": "2902354",
    "logsBloom": "0x
    "blockHash": "0xc3854e3bd316fda03370413399f2feaaf92f7aa36d9dddc494e45bdf2de747df",
    "transactionHash": "0xb49b08c8c80f7f8da82fd612d4bd7f3ec363009e17eaa20ee26055b0896df948",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 15336310,
        "transactionHash": "0xb49b08c8c80f7f8da82fd612d4bd7f3ec363009e17eaa20ee26055b0896df948",
        "address": "0xEB0c3Bf30dcA147d838D7E8E4A72fc8bf333702B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000289f8f063c4304f432bb96dd31e82bdcc5cce142"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0xc3854e3bd316fda03370413399f2feaaf92f7aa36d9dddc494e45bdf2de747df"
      }
    ],
    "blockNumber": 15336310,
    "cumulativeGasUsed": "4482849",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3f05badf0c96fd55ee328c20ce1a2e7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"logLockNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"logWithdrawNFT\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"lockNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wrappedAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridgenft/NFTBridge.sol\":\"NFTBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/bridgenft/NFTBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './NFTToken.sol';\\n\\ncontract NFTBridge is Ownable {\\n    uint chainId = block.chainid;\\n\\n    event logLockNFT(address token, uint tokenID, uint fromChain, uint toChain);\\n    event logWithdrawNFT(address token, uint tokenID, uint fromChain, uint toChain);\\n\\n    mapping(address=>mapping(uint=>address)) public wrappedAssets;\\n\\n    function lockNFT(address _token, uint tokenID, uint toChain) public{\\n        NFTToken token = NFTToken(_token);\\n        if (token.nativeContract() != address(0)) {\\n            require(token.nativeChain() == toChain,\\\"chain is error\\\");\\n            token.lock(msg.sender,tokenID);\\n            emit logLockNFT(token.nativeContract(), tokenID, chainId, toChain);\\n        } else {\\n            IERC721(token).transferFrom(msg.sender, address(this), tokenID);\\n            emit logLockNFT(_token, tokenID, chainId, toChain);\\n        }\\n    }\\n\\n    function withdrawNFT(address _token, address to, uint tokenID, uint fromChain,\\n        string memory name, string memory symbol, string memory tokenURI) public onlyOwner{\\n        NFTToken token = NFTToken(_token);\\n        if (chainId == fromChain) {\\n            IERC721(token).transferFrom(address(this), to, tokenID);\\n            emit logWithdrawNFT(_token, tokenID, fromChain, chainId);\\n        } else {\\n            address localWrapped = wrappedAssets[_token][fromChain];\\n            if (localWrapped == address(0)){\\n                token = new NFTToken(name,symbol,_token,fromChain);\\n                wrappedAssets[_token][fromChain] = address(token);\\n            }else{\\n                token = NFTToken(localWrapped);\\n            }\\n            token.mint(to,tokenID);\\n            token.setTokenURI(tokenID,tokenURI);\\n            emit logWithdrawNFT(_token, tokenID, fromChain, chainId);\\n        }\\n    }\\n}\",\"keccak256\":\"0xdfa94c9f6e11605170311297886762a8790fe6cf754383f7b9508be4a5ea19fc\",\"license\":\"MIT\"},\"contracts/bridgenft/NFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract NFTToken is ERC721Enumerable, Ownable {\\n    string public baseURI;\\n    mapping(uint256 => string) private _tokenURIs;\\n    address _nativeContract;\\n    uint _nativeChain;\\n\\n    constructor (string memory name_, string memory symbol_, address nativeContract_, uint nativeChain_) ERC721(name_, symbol_) {\\n        _nativeContract = nativeContract_;\\n        _nativeChain = nativeChain_;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function _setBaseURI(string memory baseURI_) internal {\\n        baseURI = baseURI_;\\n    }\\n\\n    function nativeContract() public view returns (address) {\\n        return _nativeContract;\\n    }\\n\\n    function nativeChain() public view returns (uint) {\\n        return _nativeChain;\\n    }\\n\\n    function mint(address to, uint256 tokenId) external onlyOwner {\\n        if (!_exists(tokenId)) {\\n            _mint(to, tokenId);\\n        } else {\\n            _transfer(address(this), to, tokenId);\\n        }\\n    }\\n\\n    function brun(uint256 tokenId) external onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    function lock(address from,uint256 tokenId) external onlyOwner {\\n        _transfer(from, address(this), tokenId);\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner {\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function setBaseURI(string memory baseURI_) external onlyOwner {\\n        _setBaseURI(baseURI_);\\n    }\\n\\n    function safeMint(address to, uint256 tokenId, bytes memory _data) external onlyOwner {\\n        _safeMint(to, tokenId, _data);\\n    }\\n\\n    function multiMint(address[] memory tos, uint256[] memory tokenIds) external onlyOwner {\\n        require(tos.length == tokenIds.length, \\\"illegal length\\\");\\n        for (uint i = 0; i < tos.length; i ++) {\\n            _mint(tos[i], tokenIds[i]);\\n        }\\n    }\\n\\n    function multiMintStart(address to, uint256 start, uint256 end) external onlyOwner {\\n        for (uint i = start; i <= end; i++) {\\n            _mint(to, i);\\n        }\\n    }\\n\\n    function multiSafeMint(address[] memory tos, uint256[] memory tokenIds, bytes memory _data) external onlyOwner {\\n        require(tos.length == tokenIds.length, \\\"illegal length\\\");\\n        for (uint i = 0; i < tos.length; i ++) {\\n            _safeMint(tos[i], tokenIds[i], _data);\\n        }\\n    }\\n}\",\"keccak256\":\"0xbab4a8e97b23119e6991d1ab62caba0f5cef8e60d964f72cccaeaa1d52c8f56a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040524660015534801561001457600080fd5b5061001e33610023565b610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6132c9806100826000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806354c993ac146200006f578063715018a614620000885780638da5cb5b1462000092578063a19ccf0214620000bb578063db968cfa14620000f2578063f2fde38b1462000109575b600080fd5b6200008662000080366004620009ff565b62000120565b005b620000866200043a565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6200009f620000cc366004620009d0565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b620000866200010336600462000901565b62000475565b620000866200011a366004620008ba565b62000725565b600083905060006001600160a01b0316816001600160a01b0316633d6c043b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016a57600080fd5b505afa1580156200017f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a59190620008e1565b6001600160a01b0316146200038a5781816001600160a01b0316632c59f9c06040518163ffffffff1660e01b815260040160206040518083038186803b158015620001ef57600080fd5b505afa15801562000204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022a919062000a37565b146200026e5760405162461bcd60e51b815260206004820152600e60248201526d31b430b4b71034b99032b93937b960911b60448201526064015b60405180910390fd5b60405163282d3fdf60e01b8152336004820152602481018490526001600160a01b0382169063282d3fdf90604401600060405180830381600087803b158015620002b757600080fd5b505af1158015620002cc573d6000803e3d6000fd5b505050507f0e695e41c09754ca8687341e8c2e968b6688c2c3596e088dcb1e1575206fc0b4816001600160a01b0316633d6c043b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032b57600080fd5b505afa15801562000340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003669190620008e1565b6001546040516200037c92918791879062000aa1565b60405180910390a162000434565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038216906323b872dd90606401600060405180830381600087803b158015620003d957600080fd5b505af1158015620003ee573d6000803e3d6000fd5b505050507f0e695e41c09754ca8687341e8c2e968b6688c2c3596e088dcb1e1575206fc0b48484600154856040516200042b949392919062000aa1565b60405180910390a15b50505050565b6000546001600160a01b03163314620004675760405162461bcd60e51b8152600401620002659062000b0d565b620004736000620007c7565b565b6000546001600160a01b03163314620004a25760405162461bcd60e51b8152600401620002659062000b0d565b600154879085141562000560576040516323b872dd60e01b81523060048201526001600160a01b038881166024830152604482018890528216906323b872dd90606401600060405180830381600087803b1580156200050057600080fd5b505af115801562000515573d6000803e3d6000fd5b505050507f7b9b472f8453990a39bd528f9d54364b421cc3436484367511495bf052899b4b88878760015460405162000552949392919062000aa1565b60405180910390a16200071b565b6001600160a01b03808916600090815260026020908152604080832089845290915290205416806200060c5784848a886040516200059e9062000817565b620005ad949392919062000ac7565b604051809103906000f080158015620005ca573d6000803e3d6000fd5b506001600160a01b038a811660009081526002602090815260408083208b8452909152902080546001600160a01b031916918316919091179055915062000610565b8091505b6040516340c10f1960e01b81526001600160a01b038981166004830152602482018990528316906340c10f1990604401600060405180830381600087803b1580156200065b57600080fd5b505af115801562000670573d6000803e3d6000fd5b5050604051630588253160e21b81526001600160a01b038516925063162094c49150620006a4908a90879060040162000b42565b600060405180830381600087803b158015620006bf57600080fd5b505af1158015620006d4573d6000803e3d6000fd5b505050507f7b9b472f8453990a39bd528f9d54364b421cc3436484367511495bf052899b4b89888860015460405162000711949392919062000aa1565b60405180910390a1505b5050505050505050565b6000546001600160a01b03163314620007525760405162461bcd60e51b8152600401620002659062000b0d565b6001600160a01b038116620007b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000265565b620007c481620007c7565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6127028062000b9283390190565b600082601f8301126200083757600080fd5b813567ffffffffffffffff8082111562000855576200085562000b65565b604051601f8301601f19908116603f0116810190828211818310171562000880576200088062000b65565b816040528381528660208588010111156200089a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215620008cd57600080fd5b8135620008da8162000b7b565b9392505050565b600060208284031215620008f457600080fd5b8151620008da8162000b7b565b600080600080600080600060e0888a0312156200091d57600080fd5b87356200092a8162000b7b565b965060208801356200093c8162000b7b565b95506040880135945060608801359350608088013567ffffffffffffffff808211156200096857600080fd5b620009768b838c0162000825565b945060a08a01359150808211156200098d57600080fd5b6200099b8b838c0162000825565b935060c08a0135915080821115620009b257600080fd5b50620009c18a828b0162000825565b91505092959891949750929550565b60008060408385031215620009e457600080fd5b8235620009f18162000b7b565b946020939093013593505050565b60008060006060848603121562000a1557600080fd5b833562000a228162000b7b565b95602085013595506040909401359392505050565b60006020828403121562000a4a57600080fd5b5051919050565b6000815180845260005b8181101562000a795760208185018101518683018201520162000a5b565b8181111562000a8c576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60808152600062000adc608083018762000a51565b828103602084015262000af0818762000a51565b6001600160a01b0395909516604084015250506060015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b82815260406020820152600062000b5d604083018462000a51565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620007c457600080fdfe60806040523480156200001157600080fd5b506040516200270238038062002702833981016040819052620000349162000260565b8351849084906200004d90600090602085019062000103565b5080516200006390600190602084019062000103565b505050620000806200007a620000ad60201b60201c565b620000b1565b600d80546001600160a01b0319166001600160a01b039390931692909217909155600e5550620003469050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200011190620002f3565b90600052602060002090601f01602090048101928262000135576000855562000180565b82601f106200015057805160ff191683800117855562000180565b8280016001018555821562000180579182015b828111156200018057825182559160200191906001019062000163565b506200018e92915062000192565b5090565b5b808211156200018e576000815560010162000193565b600082601f830112620001bb57600080fd5b81516001600160401b0380821115620001d857620001d862000330565b604051601f8301601f19908116603f0116810190828211818310171562000203576200020362000330565b816040528381526020925086838588010111156200022057600080fd5b600091505b8382101562000244578582018301518183018401529082019062000225565b83821115620002565760008385830101525b9695505050505050565b600080600080608085870312156200027757600080fd5b84516001600160401b03808211156200028f57600080fd5b6200029d88838901620001a9565b95506020870151915080821115620002b457600080fd5b50620002c387828801620001a9565b604087015190945090506001600160a01b0381168114620002e357600080fd5b6060959095015193969295505050565b600181811c908216806200030857607f821691505b602082108114156200032a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6123ac80620003566000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806342842e0e1161010f5780638832e6e3116100a2578063b88d4fde11610071578063b88d4fde146103eb578063c87b56dd146103fe578063e985e9c514610411578063f2fde38b1461044d57600080fd5b80638832e6e3146103ac5780638da5cb5b146103bf57806395d89b41146103d0578063a22cb465146103d857600080fd5b80636c0360eb116100de5780636c0360eb146103765780636e6b8cac1461037e57806370a0823114610391578063715018a6146103a457600080fd5b806342842e0e1461032a5780634f6ccce71461033d57806355f804b3146103505780636352211e1461036357600080fd5b806318160ddd116101875780632f745c59116101565780632f745c59146102e05780632f81bc71146102f35780633d6c043b1461030657806340c10f191461031757600080fd5b806318160ddd146102a057806323b872dd146102b2578063282d3fdf146102c55780632c59f9c0146102d857600080fd5b8063095ea7b3116101c3578063095ea7b3146102525780630fa3153414610267578063162094c41461027a578063180f6bbb1461028d57600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611f7c565b610460565b60405190151581526020015b60405180910390f35b61021a61048b565b60405161020991906120d9565b61023a610235366004611feb565b61051d565b6040516001600160a01b039091168152602001610209565b610265610260366004611de6565b6105aa565b005b610265610275366004611feb565b6106c0565b610265610288366004612004565b6106f6565b61026561029b366004611e67565b61072e565b6008545b604051908152602001610209565b6102656102c0366004611d06565b610783565b6102656102d3366004611de6565b6107b4565b600e546102a4565b6102a46102ee366004611de6565b6107e9565b610265610301366004611e9a565b61087f565b600d546001600160a01b031661023a565b610265610325366004611de6565b610945565b610265610338366004611d06565b610991565b6102a461034b366004611feb565b6109ac565b61026561035e366004611fb6565b610a3f565b61023a610371366004611feb565b610a72565b61021a610ae9565b61026561038c366004611efe565b610b77565b6102a461039f366004611cb8565b610c3e565b610265610cc5565b6102656103ba366004611e10565b610cfb565b600a546001600160a01b031661023a565b61021a610d30565b6102656103e6366004611daa565b610d3f565b6102656103f9366004611d42565b610d4a565b61021a61040c366004611feb565b610d7c565b6101fd61041f366004611cd3565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026561045b366004611cb8565b610e47565b60006001600160e01b0319821663780e9d6360e01b1480610485575061048582610edf565b92915050565b60606000805461049a90612288565b80601f01602080910402602001604051908101604052809291908181526020018280546104c690612288565b80156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b5050505050905090565b600061052882610f2f565b61058e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105b582610a72565b9050806001600160a01b0316836001600160a01b031614156106235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610585565b336001600160a01b038216148061063f575061063f813361041f565b6106b15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610585565b6106bb8383610f4c565b505050565b600a546001600160a01b031633146106ea5760405162461bcd60e51b81526004016105859061213e565b6106f381610fba565b50565b600a546001600160a01b031633146107205760405162461bcd60e51b81526004016105859061213e565b61072a8282611061565b5050565b600a546001600160a01b031633146107585760405162461bcd60e51b81526004016105859061213e565b815b81811161077d5761076b84826110ea565b80610775816122c3565b91505061075a565b50505050565b61078d3382611229565b6107a95760405162461bcd60e51b815260040161058590612173565b6106bb838383611313565b600a546001600160a01b031633146107de5760405162461bcd60e51b81526004016105859061213e565b61072a823083611313565b60006107f483610c3e565b82106108565760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610585565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146108a95760405162461bcd60e51b81526004016105859061213e565b80518251146108eb5760405162461bcd60e51b815260206004820152600e60248201526d0d2d8d8cacec2d840d8cadccee8d60931b6044820152606401610585565b60005b82518110156106bb5761093383828151811061090c5761090c612334565b602002602001015183838151811061092657610926612334565b60200260200101516110ea565b8061093d816122c3565b9150506108ee565b600a546001600160a01b0316331461096f5760405162461bcd60e51b81526004016105859061213e565b61097881610f2f565b6109865761072a82826110ea565b61072a308383611313565b6106bb83838360405180602001604052806000815250610d4a565b60006109b760085490565b8210610a1a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610585565b60088281548110610a2d57610a2d612334565b90600052602060002001549050919050565b600a546001600160a01b03163314610a695760405162461bcd60e51b81526004016105859061213e565b6106f3816114be565b6000818152600260205260408120546001600160a01b0316806104855760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610585565b600b8054610af690612288565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290612288565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b505050505081565b600a546001600160a01b03163314610ba15760405162461bcd60e51b81526004016105859061213e565b8151835114610be35760405162461bcd60e51b815260206004820152600e60248201526d0d2d8d8cacec2d840d8cadccee8d60931b6044820152606401610585565b60005b835181101561077d57610c2c848281518110610c0457610c04612334565b6020026020010151848381518110610c1e57610c1e612334565b6020026020010151846114d1565b80610c36816122c3565b915050610be6565b60006001600160a01b038216610ca95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610585565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610cef5760405162461bcd60e51b81526004016105859061213e565b610cf96000611504565b565b600a546001600160a01b03163314610d255760405162461bcd60e51b81526004016105859061213e565b6106bb8383836114d1565b60606001805461049a90612288565b61072a338383611556565b610d543383611229565b610d705760405162461bcd60e51b815260040161058590612173565b61077d84848484611625565b6060610d8782610f2f565b610deb5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610585565b6000610df5611658565b90506000815111610e155760405180602001604052806000815250610e40565b80610e1f84611667565b604051602001610e3092919061206d565b6040516020818303038152906040525b9392505050565b600a546001600160a01b03163314610e715760405162461bcd60e51b81526004016105859061213e565b6001600160a01b038116610ed65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610585565b6106f381611504565b60006001600160e01b031982166380ac58cd60e01b1480610f1057506001600160e01b03198216635b5e139f60e01b145b8061048557506301ffc9a760e01b6001600160e01b0319831614610485565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f8182610a72565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610fc582610a72565b9050610fd381600084611765565b610fde600083610f4c565b6001600160a01b0381166000908152600360205260408120805460019290611007908490612245565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b61106a82610f2f565b6110cb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610585565b6000828152600c6020908152604090912082516106bb92840190611aba565b6001600160a01b0382166111405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610585565b61114981610f2f565b156111965760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610585565b6111a260008383611765565b6001600160a01b03821660009081526003602052604081208054600192906111cb908490612219565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061123482610f2f565b6112955760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610585565b60006112a083610a72565b9050806001600160a01b0316846001600160a01b031614806112db5750836001600160a01b03166112d08461051d565b6001600160a01b0316145b8061130b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661132682610a72565b6001600160a01b03161461138e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610585565b6001600160a01b0382166113f05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610585565b6113fb838383611765565b611406600082610f4c565b6001600160a01b038316600090815260036020526040812080546001929061142f908490612245565b90915550506001600160a01b038216600090815260036020526040812080546001929061145d908490612219565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b805161072a90600b906020840190611aba565b6114db83836110ea565b6114e8600084848461181d565b6106bb5760405162461bcd60e51b8152600401610585906120ec565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115b85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610585565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611630848484611313565b61163c8484848461181d565b61077d5760405162461bcd60e51b8152600401610585906120ec565b6060600b805461049a90612288565b60608161168b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116b5578061169f816122c3565b91506116ae9050600a83612231565b915061168f565b60008167ffffffffffffffff8111156116d0576116d061234a565b6040519080825280601f01601f1916602001820160405280156116fa576020820181803683370190505b5090505b841561130b5761170f600183612245565b915061171c600a866122de565b611727906030612219565b60f81b81838151811061173c5761173c612334565b60200101906001600160f81b031916908160001a90535061175e600a86612231565b94506116fe565b6001600160a01b0383166117c0576117bb81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6117e3565b816001600160a01b0316836001600160a01b0316146117e3576117e3838261192a565b6001600160a01b0382166117fa576106bb816119c7565b826001600160a01b0316826001600160a01b0316146106bb576106bb8282611a76565b60006001600160a01b0384163b1561191f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061186190339089908890889060040161209c565b602060405180830381600087803b15801561187b57600080fd5b505af19250505080156118ab575060408051601f3d908101601f191682019092526118a891810190611f99565b60015b611905573d8080156118d9576040519150601f19603f3d011682016040523d82523d6000602084013e6118de565b606091505b5080516118fd5760405162461bcd60e51b8152600401610585906120ec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061130b565b506001949350505050565b6000600161193784610c3e565b6119419190612245565b600083815260076020526040902054909150808214611994576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906119d990600190612245565b60008381526009602052604081205460088054939450909284908110611a0157611a01612334565b906000526020600020015490508060088381548110611a2257611a22612334565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611a5a57611a5a61231e565b6001900381819060005260206000200160009055905550505050565b6000611a8183610c3e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611ac690612288565b90600052602060002090601f016020900481019282611ae85760008555611b2e565b82601f10611b0157805160ff1916838001178555611b2e565b82800160010185558215611b2e579182015b82811115611b2e578251825591602001919060010190611b13565b50611b3a929150611b3e565b5090565b5b80821115611b3a5760008155600101611b3f565b80356001600160a01b0381168114611b6a57600080fd5b919050565b600082601f830112611b8057600080fd5b81356020611b95611b90836121f5565b6121c4565b80838252828201915082860187848660051b8901011115611bb557600080fd5b60005b85811015611bdb57611bc982611b53565b84529284019290840190600101611bb8565b5090979650505050505050565b600082601f830112611bf957600080fd5b81356020611c09611b90836121f5565b80838252828201915082860187848660051b8901011115611c2957600080fd5b60005b85811015611bdb57813584529284019290840190600101611c2c565b600082601f830112611c5957600080fd5b813567ffffffffffffffff811115611c7357611c7361234a565b611c86601f8201601f19166020016121c4565b818152846020838601011115611c9b57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611cca57600080fd5b610e4082611b53565b60008060408385031215611ce657600080fd5b611cef83611b53565b9150611cfd60208401611b53565b90509250929050565b600080600060608486031215611d1b57600080fd5b611d2484611b53565b9250611d3260208501611b53565b9150604084013590509250925092565b60008060008060808587031215611d5857600080fd5b611d6185611b53565b9350611d6f60208601611b53565b925060408501359150606085013567ffffffffffffffff811115611d9257600080fd5b611d9e87828801611c48565b91505092959194509250565b60008060408385031215611dbd57600080fd5b611dc683611b53565b915060208301358015158114611ddb57600080fd5b809150509250929050565b60008060408385031215611df957600080fd5b611e0283611b53565b946020939093013593505050565b600080600060608486031215611e2557600080fd5b611e2e84611b53565b925060208401359150604084013567ffffffffffffffff811115611e5157600080fd5b611e5d86828701611c48565b9150509250925092565b600080600060608486031215611e7c57600080fd5b611e8584611b53565b95602085013595506040909401359392505050565b60008060408385031215611ead57600080fd5b823567ffffffffffffffff80821115611ec557600080fd5b611ed186838701611b6f565b93506020850135915080821115611ee757600080fd5b50611ef485828601611be8565b9150509250929050565b600080600060608486031215611f1357600080fd5b833567ffffffffffffffff80821115611f2b57600080fd5b611f3787838801611b6f565b94506020860135915080821115611f4d57600080fd5b611f5987838801611be8565b93506040860135915080821115611f6f57600080fd5b50611e5d86828701611c48565b600060208284031215611f8e57600080fd5b8135610e4081612360565b600060208284031215611fab57600080fd5b8151610e4081612360565b600060208284031215611fc857600080fd5b813567ffffffffffffffff811115611fdf57600080fd5b61130b84828501611c48565b600060208284031215611ffd57600080fd5b5035919050565b6000806040838503121561201757600080fd5b82359150602083013567ffffffffffffffff81111561203557600080fd5b611ef485828601611c48565b6000815180845261205981602086016020860161225c565b601f01601f19169290920160200192915050565b6000835161207f81846020880161225c565b83519083019061209381836020880161225c565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120cf90830184612041565b9695505050505050565b602081526000610e406020830184612041565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156121ed576121ed61234a565b604052919050565b600067ffffffffffffffff82111561220f5761220f61234a565b5060051b60200190565b6000821982111561222c5761222c6122f2565b500190565b60008261224057612240612308565b500490565b600082821015612257576122576122f2565b500390565b60005b8381101561227757818101518382015260200161225f565b8381111561077d5750506000910152565b600181811c9082168061229c57607f821691505b602082108114156122bd57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122d7576122d76122f2565b5060010190565b6000826122ed576122ed612308565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146106f357600080fdfea26469706673582212204c609cf2e3e163ad8e8f053cb8a74793d35731670ad342721cab9b46479e96af64736f6c63430008070033a26469706673582212201cce7bfcc7292c190bca7b0a1adfc3dbc66188d8c1184f00631c606f9da224ce64736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806354c993ac146200006f578063715018a614620000885780638da5cb5b1462000092578063a19ccf0214620000bb578063db968cfa14620000f2578063f2fde38b1462000109575b600080fd5b6200008662000080366004620009ff565b62000120565b005b620000866200043a565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6200009f620000cc366004620009d0565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b620000866200010336600462000901565b62000475565b620000866200011a366004620008ba565b62000725565b600083905060006001600160a01b0316816001600160a01b0316633d6c043b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016a57600080fd5b505afa1580156200017f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a59190620008e1565b6001600160a01b0316146200038a5781816001600160a01b0316632c59f9c06040518163ffffffff1660e01b815260040160206040518083038186803b158015620001ef57600080fd5b505afa15801562000204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022a919062000a37565b146200026e5760405162461bcd60e51b815260206004820152600e60248201526d31b430b4b71034b99032b93937b960911b60448201526064015b60405180910390fd5b60405163282d3fdf60e01b8152336004820152602481018490526001600160a01b0382169063282d3fdf90604401600060405180830381600087803b158015620002b757600080fd5b505af1158015620002cc573d6000803e3d6000fd5b505050507f0e695e41c09754ca8687341e8c2e968b6688c2c3596e088dcb1e1575206fc0b4816001600160a01b0316633d6c043b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032b57600080fd5b505afa15801562000340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003669190620008e1565b6001546040516200037c92918791879062000aa1565b60405180910390a162000434565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038216906323b872dd90606401600060405180830381600087803b158015620003d957600080fd5b505af1158015620003ee573d6000803e3d6000fd5b505050507f0e695e41c09754ca8687341e8c2e968b6688c2c3596e088dcb1e1575206fc0b48484600154856040516200042b949392919062000aa1565b60405180910390a15b50505050565b6000546001600160a01b03163314620004675760405162461bcd60e51b8152600401620002659062000b0d565b620004736000620007c7565b565b6000546001600160a01b03163314620004a25760405162461bcd60e51b8152600401620002659062000b0d565b600154879085141562000560576040516323b872dd60e01b81523060048201526001600160a01b038881166024830152604482018890528216906323b872dd90606401600060405180830381600087803b1580156200050057600080fd5b505af115801562000515573d6000803e3d6000fd5b505050507f7b9b472f8453990a39bd528f9d54364b421cc3436484367511495bf052899b4b88878760015460405162000552949392919062000aa1565b60405180910390a16200071b565b6001600160a01b03808916600090815260026020908152604080832089845290915290205416806200060c5784848a886040516200059e9062000817565b620005ad949392919062000ac7565b604051809103906000f080158015620005ca573d6000803e3d6000fd5b506001600160a01b038a811660009081526002602090815260408083208b8452909152902080546001600160a01b031916918316919091179055915062000610565b8091505b6040516340c10f1960e01b81526001600160a01b038981166004830152602482018990528316906340c10f1990604401600060405180830381600087803b1580156200065b57600080fd5b505af115801562000670573d6000803e3d6000fd5b5050604051630588253160e21b81526001600160a01b038516925063162094c49150620006a4908a90879060040162000b42565b600060405180830381600087803b158015620006bf57600080fd5b505af1158015620006d4573d6000803e3d6000fd5b505050507f7b9b472f8453990a39bd528f9d54364b421cc3436484367511495bf052899b4b89888860015460405162000711949392919062000aa1565b60405180910390a1505b5050505050505050565b6000546001600160a01b03163314620007525760405162461bcd60e51b8152600401620002659062000b0d565b6001600160a01b038116620007b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000265565b620007c481620007c7565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6127028062000b9283390190565b600082601f8301126200083757600080fd5b813567ffffffffffffffff8082111562000855576200085562000b65565b604051601f8301601f19908116603f0116810190828211818310171562000880576200088062000b65565b816040528381528660208588010111156200089a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215620008cd57600080fd5b8135620008da8162000b7b565b9392505050565b600060208284031215620008f457600080fd5b8151620008da8162000b7b565b600080600080600080600060e0888a0312156200091d57600080fd5b87356200092a8162000b7b565b965060208801356200093c8162000b7b565b95506040880135945060608801359350608088013567ffffffffffffffff808211156200096857600080fd5b620009768b838c0162000825565b945060a08a01359150808211156200098d57600080fd5b6200099b8b838c0162000825565b935060c08a0135915080821115620009b257600080fd5b50620009c18a828b0162000825565b91505092959891949750929550565b60008060408385031215620009e457600080fd5b8235620009f18162000b7b565b946020939093013593505050565b60008060006060848603121562000a1557600080fd5b833562000a228162000b7b565b95602085013595506040909401359392505050565b60006020828403121562000a4a57600080fd5b5051919050565b6000815180845260005b8181101562000a795760208185018101518683018201520162000a5b565b8181111562000a8c576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60808152600062000adc608083018762000a51565b828103602084015262000af0818762000a51565b6001600160a01b0395909516604084015250506060015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b82815260406020820152600062000b5d604083018462000a51565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620007c457600080fdfe60806040523480156200001157600080fd5b506040516200270238038062002702833981016040819052620000349162000260565b8351849084906200004d90600090602085019062000103565b5080516200006390600190602084019062000103565b505050620000806200007a620000ad60201b60201c565b620000b1565b600d80546001600160a01b0319166001600160a01b039390931692909217909155600e5550620003469050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200011190620002f3565b90600052602060002090601f01602090048101928262000135576000855562000180565b82601f106200015057805160ff191683800117855562000180565b8280016001018555821562000180579182015b828111156200018057825182559160200191906001019062000163565b506200018e92915062000192565b5090565b5b808211156200018e576000815560010162000193565b600082601f830112620001bb57600080fd5b81516001600160401b0380821115620001d857620001d862000330565b604051601f8301601f19908116603f0116810190828211818310171562000203576200020362000330565b816040528381526020925086838588010111156200022057600080fd5b600091505b8382101562000244578582018301518183018401529082019062000225565b83821115620002565760008385830101525b9695505050505050565b600080600080608085870312156200027757600080fd5b84516001600160401b03808211156200028f57600080fd5b6200029d88838901620001a9565b95506020870151915080821115620002b457600080fd5b50620002c387828801620001a9565b604087015190945090506001600160a01b0381168114620002e357600080fd5b6060959095015193969295505050565b600181811c908216806200030857607f821691505b602082108114156200032a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6123ac80620003566000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806342842e0e1161010f5780638832e6e3116100a2578063b88d4fde11610071578063b88d4fde146103eb578063c87b56dd146103fe578063e985e9c514610411578063f2fde38b1461044d57600080fd5b80638832e6e3146103ac5780638da5cb5b146103bf57806395d89b41146103d0578063a22cb465146103d857600080fd5b80636c0360eb116100de5780636c0360eb146103765780636e6b8cac1461037e57806370a0823114610391578063715018a6146103a457600080fd5b806342842e0e1461032a5780634f6ccce71461033d57806355f804b3146103505780636352211e1461036357600080fd5b806318160ddd116101875780632f745c59116101565780632f745c59146102e05780632f81bc71146102f35780633d6c043b1461030657806340c10f191461031757600080fd5b806318160ddd146102a057806323b872dd146102b2578063282d3fdf146102c55780632c59f9c0146102d857600080fd5b8063095ea7b3116101c3578063095ea7b3146102525780630fa3153414610267578063162094c41461027a578063180f6bbb1461028d57600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611f7c565b610460565b60405190151581526020015b60405180910390f35b61021a61048b565b60405161020991906120d9565b61023a610235366004611feb565b61051d565b6040516001600160a01b039091168152602001610209565b610265610260366004611de6565b6105aa565b005b610265610275366004611feb565b6106c0565b610265610288366004612004565b6106f6565b61026561029b366004611e67565b61072e565b6008545b604051908152602001610209565b6102656102c0366004611d06565b610783565b6102656102d3366004611de6565b6107b4565b600e546102a4565b6102a46102ee366004611de6565b6107e9565b610265610301366004611e9a565b61087f565b600d546001600160a01b031661023a565b610265610325366004611de6565b610945565b610265610338366004611d06565b610991565b6102a461034b366004611feb565b6109ac565b61026561035e366004611fb6565b610a3f565b61023a610371366004611feb565b610a72565b61021a610ae9565b61026561038c366004611efe565b610b77565b6102a461039f366004611cb8565b610c3e565b610265610cc5565b6102656103ba366004611e10565b610cfb565b600a546001600160a01b031661023a565b61021a610d30565b6102656103e6366004611daa565b610d3f565b6102656103f9366004611d42565b610d4a565b61021a61040c366004611feb565b610d7c565b6101fd61041f366004611cd3565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026561045b366004611cb8565b610e47565b60006001600160e01b0319821663780e9d6360e01b1480610485575061048582610edf565b92915050565b60606000805461049a90612288565b80601f01602080910402602001604051908101604052809291908181526020018280546104c690612288565b80156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b5050505050905090565b600061052882610f2f565b61058e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105b582610a72565b9050806001600160a01b0316836001600160a01b031614156106235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610585565b336001600160a01b038216148061063f575061063f813361041f565b6106b15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610585565b6106bb8383610f4c565b505050565b600a546001600160a01b031633146106ea5760405162461bcd60e51b81526004016105859061213e565b6106f381610fba565b50565b600a546001600160a01b031633146107205760405162461bcd60e51b81526004016105859061213e565b61072a8282611061565b5050565b600a546001600160a01b031633146107585760405162461bcd60e51b81526004016105859061213e565b815b81811161077d5761076b84826110ea565b80610775816122c3565b91505061075a565b50505050565b61078d3382611229565b6107a95760405162461bcd60e51b815260040161058590612173565b6106bb838383611313565b600a546001600160a01b031633146107de5760405162461bcd60e51b81526004016105859061213e565b61072a823083611313565b60006107f483610c3e565b82106108565760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610585565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146108a95760405162461bcd60e51b81526004016105859061213e565b80518251146108eb5760405162461bcd60e51b815260206004820152600e60248201526d0d2d8d8cacec2d840d8cadccee8d60931b6044820152606401610585565b60005b82518110156106bb5761093383828151811061090c5761090c612334565b602002602001015183838151811061092657610926612334565b60200260200101516110ea565b8061093d816122c3565b9150506108ee565b600a546001600160a01b0316331461096f5760405162461bcd60e51b81526004016105859061213e565b61097881610f2f565b6109865761072a82826110ea565b61072a308383611313565b6106bb83838360405180602001604052806000815250610d4a565b60006109b760085490565b8210610a1a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610585565b60088281548110610a2d57610a2d612334565b90600052602060002001549050919050565b600a546001600160a01b03163314610a695760405162461bcd60e51b81526004016105859061213e565b6106f3816114be565b6000818152600260205260408120546001600160a01b0316806104855760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610585565b600b8054610af690612288565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290612288565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b505050505081565b600a546001600160a01b03163314610ba15760405162461bcd60e51b81526004016105859061213e565b8151835114610be35760405162461bcd60e51b815260206004820152600e60248201526d0d2d8d8cacec2d840d8cadccee8d60931b6044820152606401610585565b60005b835181101561077d57610c2c848281518110610c0457610c04612334565b6020026020010151848381518110610c1e57610c1e612334565b6020026020010151846114d1565b80610c36816122c3565b915050610be6565b60006001600160a01b038216610ca95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610585565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610cef5760405162461bcd60e51b81526004016105859061213e565b610cf96000611504565b565b600a546001600160a01b03163314610d255760405162461bcd60e51b81526004016105859061213e565b6106bb8383836114d1565b60606001805461049a90612288565b61072a338383611556565b610d543383611229565b610d705760405162461bcd60e51b815260040161058590612173565b61077d84848484611625565b6060610d8782610f2f565b610deb5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610585565b6000610df5611658565b90506000815111610e155760405180602001604052806000815250610e40565b80610e1f84611667565b604051602001610e3092919061206d565b6040516020818303038152906040525b9392505050565b600a546001600160a01b03163314610e715760405162461bcd60e51b81526004016105859061213e565b6001600160a01b038116610ed65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610585565b6106f381611504565b60006001600160e01b031982166380ac58cd60e01b1480610f1057506001600160e01b03198216635b5e139f60e01b145b8061048557506301ffc9a760e01b6001600160e01b0319831614610485565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f8182610a72565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610fc582610a72565b9050610fd381600084611765565b610fde600083610f4c565b6001600160a01b0381166000908152600360205260408120805460019290611007908490612245565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b61106a82610f2f565b6110cb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610585565b6000828152600c6020908152604090912082516106bb92840190611aba565b6001600160a01b0382166111405760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610585565b61114981610f2f565b156111965760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610585565b6111a260008383611765565b6001600160a01b03821660009081526003602052604081208054600192906111cb908490612219565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061123482610f2f565b6112955760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610585565b60006112a083610a72565b9050806001600160a01b0316846001600160a01b031614806112db5750836001600160a01b03166112d08461051d565b6001600160a01b0316145b8061130b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661132682610a72565b6001600160a01b03161461138e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610585565b6001600160a01b0382166113f05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610585565b6113fb838383611765565b611406600082610f4c565b6001600160a01b038316600090815260036020526040812080546001929061142f908490612245565b90915550506001600160a01b038216600090815260036020526040812080546001929061145d908490612219565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b805161072a90600b906020840190611aba565b6114db83836110ea565b6114e8600084848461181d565b6106bb5760405162461bcd60e51b8152600401610585906120ec565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115b85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610585565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611630848484611313565b61163c8484848461181d565b61077d5760405162461bcd60e51b8152600401610585906120ec565b6060600b805461049a90612288565b60608161168b5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116b5578061169f816122c3565b91506116ae9050600a83612231565b915061168f565b60008167ffffffffffffffff8111156116d0576116d061234a565b6040519080825280601f01601f1916602001820160405280156116fa576020820181803683370190505b5090505b841561130b5761170f600183612245565b915061171c600a866122de565b611727906030612219565b60f81b81838151811061173c5761173c612334565b60200101906001600160f81b031916908160001a90535061175e600a86612231565b94506116fe565b6001600160a01b0383166117c0576117bb81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6117e3565b816001600160a01b0316836001600160a01b0316146117e3576117e3838261192a565b6001600160a01b0382166117fa576106bb816119c7565b826001600160a01b0316826001600160a01b0316146106bb576106bb8282611a76565b60006001600160a01b0384163b1561191f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061186190339089908890889060040161209c565b602060405180830381600087803b15801561187b57600080fd5b505af19250505080156118ab575060408051601f3d908101601f191682019092526118a891810190611f99565b60015b611905573d8080156118d9576040519150601f19603f3d011682016040523d82523d6000602084013e6118de565b606091505b5080516118fd5760405162461bcd60e51b8152600401610585906120ec565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061130b565b506001949350505050565b6000600161193784610c3e565b6119419190612245565b600083815260076020526040902054909150808214611994576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906119d990600190612245565b60008381526009602052604081205460088054939450909284908110611a0157611a01612334565b906000526020600020015490508060088381548110611a2257611a22612334565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611a5a57611a5a61231e565b6001900381819060005260206000200160009055905550505050565b6000611a8183610c3e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611ac690612288565b90600052602060002090601f016020900481019282611ae85760008555611b2e565b82601f10611b0157805160ff1916838001178555611b2e565b82800160010185558215611b2e579182015b82811115611b2e578251825591602001919060010190611b13565b50611b3a929150611b3e565b5090565b5b80821115611b3a5760008155600101611b3f565b80356001600160a01b0381168114611b6a57600080fd5b919050565b600082601f830112611b8057600080fd5b81356020611b95611b90836121f5565b6121c4565b80838252828201915082860187848660051b8901011115611bb557600080fd5b60005b85811015611bdb57611bc982611b53565b84529284019290840190600101611bb8565b5090979650505050505050565b600082601f830112611bf957600080fd5b81356020611c09611b90836121f5565b80838252828201915082860187848660051b8901011115611c2957600080fd5b60005b85811015611bdb57813584529284019290840190600101611c2c565b600082601f830112611c5957600080fd5b813567ffffffffffffffff811115611c7357611c7361234a565b611c86601f8201601f19166020016121c4565b818152846020838601011115611c9b57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611cca57600080fd5b610e4082611b53565b60008060408385031215611ce657600080fd5b611cef83611b53565b9150611cfd60208401611b53565b90509250929050565b600080600060608486031215611d1b57600080fd5b611d2484611b53565b9250611d3260208501611b53565b9150604084013590509250925092565b60008060008060808587031215611d5857600080fd5b611d6185611b53565b9350611d6f60208601611b53565b925060408501359150606085013567ffffffffffffffff811115611d9257600080fd5b611d9e87828801611c48565b91505092959194509250565b60008060408385031215611dbd57600080fd5b611dc683611b53565b915060208301358015158114611ddb57600080fd5b809150509250929050565b60008060408385031215611df957600080fd5b611e0283611b53565b946020939093013593505050565b600080600060608486031215611e2557600080fd5b611e2e84611b53565b925060208401359150604084013567ffffffffffffffff811115611e5157600080fd5b611e5d86828701611c48565b9150509250925092565b600080600060608486031215611e7c57600080fd5b611e8584611b53565b95602085013595506040909401359392505050565b60008060408385031215611ead57600080fd5b823567ffffffffffffffff80821115611ec557600080fd5b611ed186838701611b6f565b93506020850135915080821115611ee757600080fd5b50611ef485828601611be8565b9150509250929050565b600080600060608486031215611f1357600080fd5b833567ffffffffffffffff80821115611f2b57600080fd5b611f3787838801611b6f565b94506020860135915080821115611f4d57600080fd5b611f5987838801611be8565b93506040860135915080821115611f6f57600080fd5b50611e5d86828701611c48565b600060208284031215611f8e57600080fd5b8135610e4081612360565b600060208284031215611fab57600080fd5b8151610e4081612360565b600060208284031215611fc857600080fd5b813567ffffffffffffffff811115611fdf57600080fd5b61130b84828501611c48565b600060208284031215611ffd57600080fd5b5035919050565b6000806040838503121561201757600080fd5b82359150602083013567ffffffffffffffff81111561203557600080fd5b611ef485828601611c48565b6000815180845261205981602086016020860161225c565b601f01601f19169290920160200192915050565b6000835161207f81846020880161225c565b83519083019061209381836020880161225c565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120cf90830184612041565b9695505050505050565b602081526000610e406020830184612041565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156121ed576121ed61234a565b604052919050565b600067ffffffffffffffff82111561220f5761220f61234a565b5060051b60200190565b6000821982111561222c5761222c6122f2565b500190565b60008261224057612240612308565b500490565b600082821015612257576122576122f2565b500390565b60005b8381101561227757818101518382015260200161225f565b8381111561077d5750506000910152565b600181811c9082168061229c57607f821691505b602082108114156122bd57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122d7576122d76122f2565b5060010190565b6000826122ed576122ed612308565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146106f357600080fdfea26469706673582212204c609cf2e3e163ad8e8f053cb8a74793d35731670ad342721cab9b46479e96af64736f6c63430008070033a26469706673582212201cce7bfcc7292c190bca7b0a1adfc3dbc66188d8c1184f00631c606f9da224ce64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/bridgenft/NFTBridge.sol:NFTBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5615,
        "contract": "contracts/bridgenft/NFTBridge.sol:NFTBridge",
        "label": "chainId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5641,
        "contract": "contracts/bridgenft/NFTBridge.sol:NFTBridge",
        "label": "wrappedAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}